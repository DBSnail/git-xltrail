#!/usr/bin/env python
import sys
import os


VERSION = '0.0.1'
PYTHON_VERSION = f'{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}'


class Installer:

	class Mode:
		LOCAL = 'LOCAL'
		GLOBAL = 'GLOBAL'

	def __init__(self, mode=Mode.GLOBAL, path=None):
		if mode == Mode.GLOBAL and path:
			raise ValueError('must not specify repository path when installing globally')

		if mode == Mode.LOCAL and not path:
			raise ValueError('must specify repository path when installing locally')

	def install(self):
		pass

	def uninstall(self):
		pass


class CommandParser:

	def __init__(self):
		self.args = sys.argv[1:]
	
	def execute(self):
		if not self.args:
			return self.help()

		command = self.args[0]
		args = self.args[1:]

		if not hasattr(self, command):
			return print(f"""Error: unknown command "{command}" for "git-xltrail"\nRun 'git-xltrail --help' for usage.""")

		getattr(self, command)(*args)


	def help(self, *args):
		arg = args[0] if args else None
		if arg == 'install':
			print("""git xltrail install [options]\n
Perform the following actions to ensure that Git xltrail is setup properly:\n
* Set up .gitignore to make Git ignore temporary Excel files.
* Install a git-diff drop-in replacement for Excel files.\n
Options:\n
Without any options, git xltrail install will setup the Excel differ and
.gitignore globally.\n
* --local:
    Sets the .gitignore filters and the git-diff Excel drop-in replacement
    in the local repository, instead of the global git config (~/.gitconfig).""")
		elif arg == 'push':
			print("""git xltrail push [options] <remote> [<ref>...]
git xltrail push <remote> [<ref>...]

Push the Excel workbook files to the Git remote, automatically resolving version
conflicts by pulling from remote before the push.

Options:

* --dry-run:
    Print version conflicts that the push would solve, without actually pushing them.""")
		elif arg is None:
			print(f"""git-xltrail/{VERSION} (windows amd64; Python {PYTHON_VERSION})
git xltrail <command> [<args>]\n
Git xltrail is a system for managing Excel workbook files in
association with a Git repository. Git xltrail:
* installs a special git-diff for Excel files 
* makes Git ignore temporary Excel files via .gitignore\n
Commands
--------\n
* git xltrail install:
    Install Git xltrail configuration.
* git xltrail push:
    Push workbook to remote, ignoring version conflicts.
* git xltrail version:
    Report the version number.""")
		else:
			print(f'Sorry, no usage text found for "{arg}"')



if __name__ == '__main__':
	command_parser = CommandParser()
	command_parser.execute()


# if len(sys.argv) < 2:
# 	raise ValueError('Invalid arguments')
	
# command = sys.argv[1]
# repo = os.getcwd()
# XLTRAIL_TAG = '[diff "xltrail"]'
# XLTRAIL_COMMAND = 'python C:/Users/Bjoern/Developer/git-xltrail/xldiff.py'


# if not '.git' in os.listdir(repo):
# 	raise ValueError('Not a Git repository')


# #.gitattributes
# #*.xls* diff=xltrail
# #*.xla* diff=xltrail


# def configure_git_config(path):
# 	# Configures: .git/config
# 	# Ensures that this section is part of the config file:
# 	# <XLTRAIL_TAG>
# 	#     command = <XLTRAIL_COMMAND>
# 	with open(path, 'r') as f:
# 		content = f.read().split('\n')
# 	if XLTRAIL_TAG not in content:
# 		content.append(XLTRAIL_TAG)
# 		content.append(f'\tcommand={XLTRAIL_COMMAND}')
# 		with open(path, 'w') as f:
# 			f.writelines([f'{line}\n'for line in content])

# def configure_git_attributes(path):
# 	# Configures: .gitattributes
# 	# Ensures that this section is part of the config file:
# 	# <XLTRAIL_TAG>
# 	#     command = <XLTRAIL_COMMAND>
# 	with open(path, 'r') as f:
# 		content = f.read().split('\n')
# 	if XLTRAIL_TAG not in content:
# 		content.append(XLTRAIL_TAG)
# 		content.append(f'\tcommand={XLTRAIL_COMMAND}')
# 		with open(path, 'w') as f:
# 			f.writelines([f'{line}\n'for line in content])



# if command == 'install':
# 	global
# 	if len(sys.argv) == 3 and sys.argv[2] == '--local':
# 		pass


# if command == 'track':
# 	if len(sys.argv) < 3:
# 		sys.exit(1)
# 	configure_git_config(os.path.join(repo, '.git', 'config'))
# 	configure_git_attributes(os.path.join(repo, '.gitattributes'))
	
# if command == 'untrack':
# 	if len(sys.argv) < 3:
# 		sys.exit(1)
# 	configure_git_config(os.path.join(repo, '.git', 'config'))
# 	configure_git_attributes(os.path.join(repo, '.gitattributes'))

# if command == 'help':
# 	# 1. set up .gitignore
# 	# 2. set up custom differ (.git/config + .gitattributes)
# 	# 3. set up pre-push hook (git pull)
# 	pass


# elif command == 'uninstall':
# 	# undo 'install'
# 	pass	


