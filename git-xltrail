#!/usr/bin/env python
import sys
import os
import subprocess


VERSION = '0.0.1'
PYTHON_VERSION = f'{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}'

# #.gitattributes
# #*.xls* diff=xltrail
# #*.xla* diff=xltrail

class Installer:

	def __init__(self, mode='global', path=None):
		if mode == 'global' and path:
			raise ValueError('must not specify repository path when installing globally')

		if mode == 'local' and not path:
			raise ValueError('must specify repository path when installing locally')

		self.mode = mode
		self.path = path

	def install(self):
		if self.mode == 'local':
			subprocess.call(['git', 'config', 'diff.xltrail.command', '"test"'], cwd=self.path)
		else:
			subprocess.call(['git', 'config', '--global', 'diff.xltrail.command', '"test"'])

	def uninstall(self):
		pass


class CommandParser:

	def __init__(self):
		self.args = sys.argv[1:]
	
	def execute(self):
		if not self.args:
			return self.help()

		command = self.args[0]
		args = self.args[1:]

		# do not process if command does not exist
		if not hasattr(self, command):
			return print(f"""Error: unknown command "{command}" for "git-xltrail"\nRun 'git-xltrail --help' for usage.""")

		# execute command
		getattr(self, command)(*args)

	
	def push(self, *args):
		pass

	def install(self, *args):
		if args:
			if args[0] == '--local':
				installer = Installer(mode='local', path=os.getcwd())
			else:
				return print(f"""Invalid option "{args[0]}" for "git-xltrail install"\nRun 'git-xltrail --help' for usage.""")
		else:
			installer = Installer(mode='global')
		installer.install()


	def help(self, *args):
		arg = args[0] if args else None
		if arg == 'install':
			print("""git xltrail install [options]\n
Perform the following actions to ensure that Git xltrail is setup properly:\n
* Set up .gitignore to make Git ignore temporary Excel files.
* Install a git-diff drop-in replacement for Excel files.\n
Options:\n
Without any options, git xltrail install will setup the Excel differ and
.gitignore globally.\n
* --local:
    Sets the .gitignore filters and the git-diff Excel drop-in replacement
    in the local repository, instead of the global git config (~/.gitconfig).""")
		elif arg == 'push':
			print("""git xltrail push [options] <remote> [<ref>...]
git xltrail push <remote> [<ref>...]

Push the Excel workbook files to the Git remote, automatically resolving version
conflicts by pulling from remote before the push.

Options:

* --dry-run:
    Print version conflicts that the push would solve, without actually pushing them.""")
		elif arg is None:
			print(f"""git-xltrail/{VERSION} (windows amd64; Python {PYTHON_VERSION})
git xltrail <command> [<args>]\n
Git xltrail is a system for managing Excel workbook files in
association with a Git repository. Git xltrail:
* installs a special git-diff for Excel files 
* makes Git ignore temporary Excel files via .gitignore\n
Commands
--------\n
* git xltrail install:
    Install Git xltrail configuration.
* git xltrail push:
    Push workbook to remote, ignoring version conflicts.
* git xltrail version:
    Report the version number.""")
		else:
			print(f'Sorry, no usage text found for "{arg}"')



if __name__ == '__main__':
	command_parser = CommandParser()
	command_parser.execute()
